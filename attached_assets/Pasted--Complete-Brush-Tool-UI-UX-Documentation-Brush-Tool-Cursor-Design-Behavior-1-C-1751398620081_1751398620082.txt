# Complete Brush Tool UI/UX Documentation

## **🎯 Brush Tool Cursor Design & Behavior**

### **1. Cursor Visual States**

#### **Default State (Hover)**
```typescript
// Cursor appearance when hovering over canvas
const defaultCursor = {
  type: 'crosshair',           // Standard medical imaging cursor
  size: brushSize,             // Circle size matches brush size
  color: '#ffffff',            // White outline
  borderWidth: 2,              // 2px border
  borderStyle: 'solid',        // Solid line
  fill: 'transparent',         // Transparent fill
  opacity: 0.7                 // 70% opacity for non-intrusive display
};
```

#### **Active Drawing State**
```typescript
// Cursor appearance during active brush stroke
const activeCursor = {
  type: 'crosshair',
  size: brushSize,
  color: operation === 'additive' ? '#00ff00' : '#ff0000', // Green/Red based on operation
  borderWidth: 3,              // Thicker border for active state
  borderStyle: 'solid',
  fill: 'transparent',
  opacity: 1.0,                // Full opacity
  animation: 'pulse'           // Subtle pulse animation
};
```

#### **Disabled State**
```typescript
// Cursor appearance when brush tool is disabled
const disabledCursor = {
  type: 'not-allowed',         // Standard disabled cursor
  size: brushSize,
  color: '#666666',            // Grayed out
  borderWidth: 1,              // Thin border
  borderStyle: 'dashed',       // Dashed line
  fill: 'transparent',
  opacity: 0.3                 // Very low opacity
};
```

### **2. Brush Circle Visual Design**

#### **Circle Structure**
```typescript
interface BrushCircle {
  // Main circle
  outerCircle: {
    radius: brushSize / 2,
    strokeColor: operationColor,
    strokeWidth: 2,
    strokeStyle: 'solid',
    fill: 'transparent'
  };
  
  // Inner guide circle (50% of brush size)
  innerCircle: {
    radius: brushSize / 4,
    strokeColor: operationColor,
    strokeWidth: 1,
    strokeStyle: 'dashed',
    fill: 'transparent',
    opacity: 0.5
  };
  
  // Center crosshair
  crosshair: {
    size: 8,
    strokeColor: operationColor,
    strokeWidth: 2,
    strokeStyle: 'solid'
  };
  
  // Operation indicator
  operationIndicator: {
    type: operation === 'additive' ? 'plus' : 'minus',
    size: 6,
    color: operationColor,
    position: 'top-right'
  };
}
```

#### **Visual Rendering Code**
```typescript
renderBrushCircle(context: CanvasRenderingContext2D, position: Point): void {
  const centerX = position.x;
  const centerY = position.y;
  const radius = this.brushSize / 2;
  
  context.save();
  
  // Set operation color
  const operationColor = this.operation === BrushOperation.ADDITIVE ? '#00ff00' : '#ff0000';
  
  // Draw outer circle
  context.strokeStyle = operationColor;
  context.lineWidth = 2;
  context.setLineDash([]);
  context.globalAlpha = this.isDrawing ? 1.0 : 0.7;
  
  context.beginPath();
  context.arc(centerX, centerY, radius, 0, 2 * Math.PI);
  context.stroke();
  
  // Draw inner guide circle
  context.lineWidth = 1;
  context.setLineDash([5, 5]);
  context.globalAlpha = 0.5;
  
  context.beginPath();
  context.arc(centerX, centerY, radius / 2, 0, 2 * Math.PI);
  context.stroke();
  
  // Draw center crosshair
  context.setLineDash([]);
  context.lineWidth = 2;
  context.globalAlpha = 1.0;
  
  const crosshairSize = 8;
  context.beginPath();
  context.moveTo(centerX - crosshairSize, centerY);
  context.lineTo(centerX + crosshairSize, centerY);
  context.moveTo(centerX, centerY - crosshairSize);
  context.lineTo(centerX, centerY + crosshairSize);
  context.stroke();
  
  // Draw operation indicator
  this.renderOperationIndicator(context, centerX, centerY, operationColor);
  
  context.restore();
}
```

## **��️ Mouse Interaction Design**

### **3. Left Click Behavior**

#### **Primary Brush Operation**
```typescript
onMouseDown(event: MouseEvent): void {
  // Only respond to left mouse button
  if (event.button !== 0) return;
  
  this.isDrawing = true;
  this.currentPosition = this.getCanvasCoordinates(event);
  this.lastPosition = this.currentPosition;
  this.pathPoints = [this.currentPosition];
  
  // Start brush stroke
  this.startBrushStroke();
  
  // Update cursor to active state
  this.updateCursorState('active');
}
```

#### **Stroke Continuation**
```typescript
onMouseMove(event: MouseEvent): void {
  if (!this.isDrawing) return;
  
  this.currentPosition = this.getCanvasCoordinates(event);
  this.pathPoints.push(this.currentPosition);
  
  // Apply brush stroke for current segment
  if (this.lastPosition && this.currentPosition) {
    this.applyBrushStroke(this.lastPosition, this.currentPosition);
  }
  
  this.lastPosition = this.currentPosition;
  
  // Update visual feedback
  this.updateBrushPreview();
}
```

#### **Stroke Completion**
```typescript
onMouseUp(event: MouseEvent): void {
  if (event.button !== 0) return;
  
  this.isDrawing = false;
  this.lastPosition = undefined;
  
  // Finalize brush stroke
  this.finalizeBrushStroke();
  
  // Update cursor to default state
  this.updateCursorState('default');
  
  // Clear path points
  this.pathPoints = [];
}
```

### **4. Right Click Behavior**

#### **Context Menu & Operation Toggle**
```typescript
onContextMenu(event: MouseEvent): void {
  // Prevent default context menu
  event.preventDefault();
  
  // Toggle operation mode
  this.toggleOperationMode();
  
  // Show operation change feedback
  this.showOperationChangeFeedback();
}
```

#### **Operation Toggle Implementation**
```typescript
toggleOperationMode(): void {
  this.operation = this.operation === BrushOperation.ADDITIVE 
    ? BrushOperation.SUBTRACTIVE 
    : BrushOperation.ADDITIVE;
  
  // Update visual indicators
  this.updateOperationIndicators();
  
  // Show user feedback
  this.showToastNotification(
    `Switched to ${this.operation === BrushOperation.ADDITIVE ? 'Additive' : 'Subtractive'} mode`
  );
}
```

#### **Alternative: Right-Click Drag for Operation**
```typescript
onMouseDown(event: MouseEvent): void {
  if (event.button === 2) { // Right mouse button
    this.isRightClickMode = true;
    this.tempOperation = this.operation === BrushOperation.ADDITIVE 
      ? BrushOperation.SUBTRACTIVE 
      : BrushOperation.ADDITIVE;
    return;
  }
  
  // Normal left-click behavior...
}

onMouseUp(event: MouseEvent): void {
  if (event.button === 2) {
    this.isRightClickMode = false;
    this.tempOperation = undefined;
    return;
  }
  
  // Normal left-click behavior...
}
```

## **🎨 User Interface Elements**

### **5. Brush Tool Panel**

#### **Tool Controls Layout**
```typescript
interface BrushToolPanel {
  // Brush size control
  brushSizeControl: {
    type: 'slider',
    min: 1,
    max: 100,
    default: 30,
    step: 1,
    label: 'Brush Size',
    unit: 'px',
    onChange: (size: number) => this.setBrushSize(size)
  };
  
  // Operation mode selector
  operationSelector: {
    type: 'toggle',
    options: [
      { value: 'additive', label: 'Add', icon: 'plus', color: '#00ff00' },
      { value: 'subtractive', label: 'Remove', icon: 'minus', color: '#ff0000' }
    ],
    default: 'additive',
    onChange: (operation: BrushOperation) => this.setOperation(operation)
  };
  
  // Smart mode toggle
  smartModeToggle: {
    type: 'checkbox',
    label: 'Smart Mode',
    description: 'Automatically detect add/subtract based on position',
    default: true,
    onChange: (enabled: boolean) => this.setSmartMode(enabled)
  };
  
  // Brush preview
  brushPreview: {
    type: 'canvas',
    size: 100,
    showSize: true,
    showOperation: true,
    interactive: true
  };
}
```

#### **Panel Implementation**
```typescript
export function BrushToolPanel({ 
  brushSize, 
  operation, 
  smartMode, 
  onBrushSizeChange, 
  onOperationChange, 
  onSmartModeChange 
}: BrushToolPanelProps) {
  return (
    <div className="brush-tool-panel">
      <div className="panel-section">
        <h3>Brush Settings</h3>
        
        {/* Brush Size Slider */}
        <div className="control-group">
          <label>Brush Size: {brushSize}px</label>
          <input
            type="range"
            min="1"
            max="100"
            value={brushSize}
            onChange={(e) => onBrushSizeChange(parseInt(e.target.value))}
            className="brush-size-slider"
          />
        </div>
        
        {/* Operation Toggle */}
        <div className="control-group">
          <label>Operation Mode</label>
          <div className="operation-toggle">
            <button
              className={`operation-btn ${operation === 'additive' ? 'active' : ''}`}
              onClick={() => onOperationChange('additive')}
            >
              <PlusIcon /> Add
            </button>
            <button
              className={`operation-btn ${operation === 'subtractive' ? 'active' : ''}`}
              onClick={() => onOperationChange('subtractive')}
            >
              <MinusIcon /> Remove
            </button>
          </div>
        </div>
        
        {/* Smart Mode Toggle */}
        <div className="control-group">
          <label className="checkbox-label">
            <input
              type="checkbox"
              checked={smartMode}
              onChange={(e) => onSmartModeChange(e.target.checked)}
            />
            Smart Mode
          </label>
          <small>Automatically detect add/subtract based on position</small>
        </div>
      </div>
      
      {/* Brush Preview */}
      <div className="panel-section">
        <h3>Brush Preview</h3>
        <BrushPreview 
          size={brushSize}
          operation={operation}
          className="brush-preview-canvas"
        />
      </div>
    </div>
  );
}
```

### **6. Visual Feedback System**

#### **Operation Change Feedback**
```typescript
showOperationChangeFeedback(): void {
  // Flash the brush circle
  this.flashBrushCircle();
  
  // Show toast notification
  this.showToastNotification(
    `Switched to ${this.operation === BrushOperation.ADDITIVE ? 'Additive' : 'Subtractive'} mode`,
    'info',
    2000
  );
  
  // Update cursor color
  this.updateCursorColor();
}
```

#### **Brush Size Change Feedback**
```typescript
onBrushSizeChange(newSize: number): void {
  this.brushSize = newSize;
  
  // Animate brush circle size change
  this.animateBrushSizeChange(newSize);
  
  // Update preview
  this.updateBrushPreview();
  
  // Show size indicator
  this.showSizeIndicator(newSize);
}
```

#### **Stroke Preview**
```typescript
updateBrushPreview(): void {
  if (!this.isDrawing || this.pathPoints.length < 2) return;
  
  // Draw stroke preview
  this.renderStrokePreview();
  
  // Show real-time operation feedback
  this.showOperationFeedback();
}
```

## **🎯 Professional Medical Imaging Standards**

### **7. Medical Workflow Integration**

#### **Keyboard Shortcuts**
```typescript
const keyboardShortcuts = {
  'B': 'Activate brush tool',
  'A': 'Switch to additive mode',
  'S': 'Switch to subtractive mode',
  '[': 'Decrease brush size',
  ']': 'Increase brush size',
  'Shift + B': 'Toggle smart mode',
  'Escape': 'Cancel current stroke',
  'Ctrl + Z': 'Undo last stroke',
  'Ctrl + Y': 'Redo last stroke'
};
```

#### **Medical Imaging Cursor Standards**
```typescript
// Follow medical imaging cursor conventions
const medicalCursorStandards = {
  // Always show crosshair for precision
  crosshair: true,
  
  // Use standard medical colors
  colors: {
    additive: '#00ff00',    // Green for adding
    subtractive: '#ff0000', // Red for removing
    neutral: '#ffffff'      // White for neutral
  },
  
  // Maintain consistent sizing
  sizing: {
    minSize: 1,             // Minimum 1px brush
    maxSize: 100,           // Maximum 100px brush
    defaultSize: 30         // Default 30px brush
  },
  
  // Professional visual feedback
  feedback: {
    strokePreview: true,    // Show stroke preview
    operationIndicator: true, // Show operation mode
    sizeIndicator: true     // Show brush size
  }
};
```

### **8. Accessibility Features**

#### **Screen Reader Support**
```typescript
// Add ARIA labels and descriptions
const accessibilityFeatures = {
  ariaLabels: {
    brushSize: 'Brush size slider',
    operationMode: 'Operation mode selector',
    smartMode: 'Smart mode toggle'
  },
  
  descriptions: {
    brushTool: 'Medical contour editing brush tool',
    additiveMode: 'Add to existing contours',
    subtractiveMode: 'Remove from existing contours',
    smartMode: 'Automatically detect operation based on cursor position'
  },
  
  keyboardNavigation: {
    tabOrder: ['brush-size', 'operation-mode', 'smart-mode', 'canvas'],
    focusIndicators: true,
    keyboardShortcuts: true
  }
};
```

## **📱 Responsive Design**

### **9. Mobile & Tablet Support**

#### **Touch Interactions**
```typescript
// Touch event handling for mobile devices
onTouchStart(event: TouchEvent): void {
  event.preventDefault();
  const touch = event.touches[0];
  const mouseEvent = this.convertTouchToMouse(touch, 'mousedown');
  this.onMouseDown(mouseEvent);
}

onTouchMove(event: TouchEvent): void {
  event.preventDefault();
  const touch = event.touches[0];
  const mouseEvent = this.convertTouchToMouse(touch, 'mousemove');
  this.onMouseMove(mouseEvent);
}

onTouchEnd(event: TouchEvent): void {
  event.preventDefault();
  const mouseEvent = this.convertTouchToMouse(null, 'mouseup');
  this.onMouseUp(mouseEvent);
}
```

#### **Mobile-Optimized UI**
```typescript
// Responsive brush tool panel
const mobileBrushPanel = {
  // Larger touch targets
  touchTargets: {
    minSize: 44, // iOS minimum touch target
    padding: 8
  },
  
  // Simplified controls for mobile
  mobileControls: {
    brushSize: 'slider', // Simple slider
    operation: 'toggle', // Simple toggle
    smartMode: 'hidden'  // Hide on mobile for simplicity
  },
  
  // Gesture support
  gestures: {
    pinchToZoom: true,   // Pinch to change brush size
    longPress: true,     // Long press for context menu
    doubleTap: true      // Double tap to reset
  }
};
```

This comprehensive UI/UX documentation provides a complete guide for implementing a professional medical-grade brush tool with proper cursor behavior, mouse interactions, and user interface elements that meet medical imaging standards.