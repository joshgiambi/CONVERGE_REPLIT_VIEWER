Web-Based DICOM Parser (Streamlit)
This guide walks you through building a web-based DICOM parser that displays metadata for MRI, CT, PET/
CT, Registration, RT Structure Set, Dose, and Plan files. For structure sets, it will list all structures with their
assigned colors. This is optimized for Replit but works anywhere with Python.
Features
•
•
•
•
Upload a ZIP of DICOM files
Parses Patient ID, Patient Name, Series Description, Modality, Dates
For RTSTRUCT: Lists structures with names and colors, shows structure set date
Displays a table of DICOM metadata for all found files
Instructions (Replit or Local)
1.
2.
3.
Create a new Replit (Python + Streamlit)
Copy all code below into main.py
Add these lines to requirements.txt :
pydicom
streamlit
pandas
Pillow
4.
Click Run and open the Streamlit web link provided
main.py Code
import streamlit as st
import zipfile
import os
import tempfile
import pydicom
import pandas as pd
from collections import defaultdict
from PIL import Image, ImageDraw
1
def extract_zip(uploaded_zip):
temp_dir = tempfile.mkdtemp()
with zipfile.ZipFile(uploaded_zip, 'r') as zip_ref:
zip_ref.extractall(temp_dir)
return temp_dir
def dicom_metadata_from_folder(folder):
data = []
rtstruct_details = defaultdict(dict)
for root, _, files in os.walk(folder):
for file in files:
if not file.lower().endswith('.dcm'):
continue
try:
ds = pydicom.dcmread(os.path.join(root, file),
stop_before_pixels=True)
row = {
'Filename': file,
'Modality': getattr(ds, 'Modality',
''),
'PatientID': getattr(ds, 'PatientID',
''),
'PatientName': str(getattr(ds, 'PatientName',
'')),
'StudyDate': getattr(ds, 'StudyDate',
''),
'SeriesDescription': getattr(ds, 'SeriesDescription',
'SOPClassUID': getattr(ds, 'SOPClassUID',
''),
}
# Add all unique tags if you want more fields
for elem in ds:
if elem.keyword not in row and elem.keyword and
elem.keyword != "PixelData":
row[elem.keyword] = str(elem.value)
if ds.Modality == "RTSTRUCT":
# Parse structure names and colors
structures = []
colors = []
for roi, roi_disp in zip(ds.StructureSetROISequence,
ds.ROIContourSequence):
name = roi.ROIName
rgb = None
if hasattr(roi_disp, 'ROIDisplayColor'):
rgb = tuple(roi_disp.ROIDisplayColor)
structures.append(name)
colors.append(rgb)
rtstruct_details[file] = {
'StructureSetDate': getattr(ds, 'StructureSetDate',
'Structures': list(zip(structures, colors)),
}
data.append(row)
''),
''),
2
except Exception as e:
st.warning(f"Failed to parse {file}: {e}")
return pd.DataFrame(data), rtstruct_details
# --- Streamlit UI ---
st.title("Web-Based DICOM Parser")
st.write("Upload a ZIP file of DICOM studies (MRI, CT, PET/CT, RTSTRUCT, DOSE,
PLAN, REG, etc). Parses and displays DICOM metadata.")
uploaded = st.file_uploader("Upload ZIP of DICOM files", type=["zip"])
if uploaded:
temp_dir = extract_zip(uploaded)
df, rtstruct_details = dicom_metadata_from_folder(temp_dir)
st.subheader("DICOM Metadata Table")
st.dataframe(df, use_container_width=True)
# For each RTSTRUCT, list structures and show color
if rtstruct_details:
st.subheader("RT Structure Sets Details")
for fname, details in rtstruct_details.items():
st.markdown(f"**File:** `{fname}`")
st.write(f"Structure Set Date: {details.get('StructureSetDate',
'')}")
structs = details['Structures']
for name, color in structs:
col1, col2 = st.columns([3,1])
with col1:
st.write(name)
with col2:
# Show a color swatch
if color:
img = Image.new('RGB', (30, 30), color)
st.image(img, width=30)
else:
st.write("-")
What you get
•
•
•
Fast, reliable metadata extraction for all DICOM types
Automatic structure set parsing: Lists structures, displays color swatches
Extensible: Easily add any more DICOM tags you want (see the loop on elem in ds )
3
FAQ & Tips
•
•
•
•
RTSTRUCT colors: If colors are missing, it’s because not all structure sets store colors in the DICOM
tags.
Security: Never upload PHI-containing files to public Replit unless you have permission; use this
privately for testing.
Custom fields: Edit the fields displayed in the table by adjusting the row dictionary.
Debugging: If some DICOMs fail to parse, see the warning at the bottom of the app.