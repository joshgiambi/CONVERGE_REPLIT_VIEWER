import { useEffect, useRef, useState, useCallback } from 'react';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { ChevronLeft, ChevronRight } from 'lucide-react';

interface WorkingViewerProps {
  seriesId: number;
  studyId?: number;
  windowLevel?: { window: number; level: number };
  onWindowLevelChange?: (windowLevel: { window: number; level: number }) => void;
  onZoomIn?: () => void;
  onZoomOut?: () => void;
  onResetZoom?: () => void;
  rtStructures?: any;
  structureVisibility?: Map<number, boolean>;
}

export function WorkingViewer({ 
  seriesId, 
  studyId, 
  windowLevel: externalWindowLevel, 
  onWindowLevelChange, 
  onZoomIn, 
  onZoomOut, 
  onResetZoom, 
  rtStructures: externalRTStructures, 
  structureVisibility: externalStructureVisibility 
}: WorkingViewerProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [images, setImages] = useState<any[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [loadingProgress, setLoadingProgress] = useState({ loaded: 0, total: 0 });
  
  // Use external RT structures if provided
  const rtStructures = externalRTStructures;
  const structureVisibility = externalStructureVisibility || new Map();
  const [showStructures, setShowStructures] = useState(true);
  
  // Convert external window/level format to internal width/center format
  const currentWindowLevel = externalWindowLevel 
    ? { width: externalWindowLevel.window, center: externalWindowLevel.level }
    : { width: 400, center: 40 };

  // Function to update external window/level when internal changes
  const updateWindowLevel = useCallback((newWindowLevel: { width: number; center: number }) => {
    if (onWindowLevelChange) {
      onWindowLevelChange({ window: newWindowLevel.width, level: newWindowLevel.center });
    }
  }, [onWindowLevelChange]);

  const [imageCache, setImageCache] = useState<Map<string, { data: Float32Array, width: number, height: number }>>(new Map());
  const [isPreloading, setIsPreloading] = useState(false);
  
  // Zoom and pan state
  const [zoom, setZoom] = useState(1);
  const [panX, setPanX] = useState(0);
  const [panY, setPanY] = useState(0);
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const [imageMetadata, setImageMetadata] = useState<any>(null);
  const [lastPanX, setLastPanX] = useState(0);
  const [lastPanY, setLastPanY] = useState(0);

  // Load DICOM parser once
  const loadDicomParser = useCallback((): Promise<void> => {
    return new Promise((resolve, reject) => {
      if (window.dicomParser) {
        resolve();
        return;
      }

      const script = document.createElement('script');
      script.src = 'https://unpkg.com/dicom-parser@1.8.21/dist/dicomParser.min.js';
      script.onload = () => resolve();
      script.onerror = () => reject(new Error('Failed to load dicom-parser'));
      document.head.appendChild(script);
    });
  }, []);

  // OPTIMIZED: Fast metadata extraction without full image download
  const extractQuickMetadata = useCallback(async (sopInstanceUID: string) => {
    try {
      // First try to get just the DICOM header (first 1KB should contain metadata)
      const response = await fetch(`/api/images/${sopInstanceUID}`, {
        headers: { 'Range': 'bytes=0-2048' } // Just get header portion
      });
      
      if (response.status === 206 || response.ok) {
        const arrayBuffer = await response.arrayBuffer();
        const byteArray = new Uint8Array(arrayBuffer);
        const dataSet = window.dicomParser.parseDicom(byteArray);
        
        const sliceLocation = dataSet.floatString('x00201041');
        const imagePosition = dataSet.string('x00200032');
        const instanceNumber = dataSet.intString('x00200013');
        
        let zPosition = null;
        if (imagePosition) {
          const positions = imagePosition.split('\\').map(p => parseFloat(p));
          zPosition = positions[2];
        }
        
        return {
          parsedSliceLocation: sliceLocation ? parseFloat(sliceLocation) : null,
          parsedZPosition: zPosition,
          parsedInstanceNumber: instanceNumber ? parseInt(instanceNumber) : null
        };
      }
    } catch (error) {
      // Fallback: if range request fails, use instance number
      console.warn(`Range request failed for ${sopInstanceUID}, using fallback`);
    }
    
    return {
      parsedSliceLocation: null,
      parsedZPosition: null,
      parsedInstanceNumber: null
    };
  }, []);

  // OPTIMIZED: Fast image list loading with minimal metadata
  const loadImages = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);
      setLoadingProgress({ loaded: 0, total: 0 });
      
      // Load DICOM parser first
      await loadDicomParser();
      
      const response = await fetch(`/api/series/${seriesId}/images`);
      if (!response.ok) {
        throw new Error(`Failed to load images: ${response.statusText}`);
      }
      
      const seriesImages = await response.json();
      setLoadingProgress({ loaded: 0, total: seriesImages.length });
      
      // OPTIMIZED: Extract metadata in smaller batches to avoid overwhelming browser
      const batchSize = 10;
      const imagesWithMetadata = [];
      
      for (let i = 0; i < seriesImages.length; i += batchSize) {
        const batch = seriesImages.slice(i, i + batchSize);
        
        const batchResults = await Promise.all(
          batch.map(async (img: any) => {
            try {
              const metadata = await extractQuickMetadata(img.sopInstanceUID);
              return { ...img, ...metadata };
            } catch (error) {
              console.warn(`Failed to parse metadata for ${img.fileName}:`, error);
              return {
                ...img,
                parsedSliceLocation: null,
                parsedZPosition: null,
                parsedInstanceNumber: img.instanceNumber
              };
            }
          })
        );
        
        imagesWithMetadata.push(...batchResults);
        setLoadingProgress({ loaded: imagesWithMetadata.length, total: seriesImages.length });
        
        // Small delay to prevent browser lock-up
        await new Promise(resolve => setTimeout(resolve, 10));
      }
      
      // Sort by spatial position
      const sortedImages = imagesWithMetadata.sort((a: any, b: any) => {
        if (a.parsedSliceLocation !== null && b.parsedSliceLocation !== null) {
          return a.parsedSliceLocation - b.parsedSliceLocation;
        }
        if (a.parsedZPosition !== null && b.parsedZPosition !== null) {
          return a.parsedZPosition - b.parsedZPosition;
        }
        if (a.parsedInstanceNumber !== null && b.parsedInstanceNumber !== null) {
          return a.parsedInstanceNumber - b.parsedInstanceNumber;
        }
        return a.fileName.localeCompare(b.fileName, undefined, { numeric: true });
      });
      
      setImages(sortedImages);
      setCurrentIndex(0);
      
      // Start aggressive preloading immediately
      preloadAllImagesOptimized(sortedImages);
      
    } catch (error: any) {
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  }, [seriesId, loadDicomParser, extractQuickMetadata]);

  // OPTIMIZED: Fast DICOM parsing with performance improvements
  const parseDicomImageOptimized = useCallback(async (arrayBuffer: ArrayBuffer) => {
    try {
      const byteArray = new Uint8Array(arrayBuffer);
      const dataSet = window.dicomParser.parseDicom(byteArray);
      
      const pixelDataElement = dataSet.elements.x7fe00010;
      if (!pixelDataElement) {
        throw new Error('No pixel data found in DICOM file');
      }
      
      const rows = dataSet.uint16('x00280010') || 512;
      const cols = dataSet.uint16('x00280011') || 512;
      const bitsAllocated = dataSet.uint16('x00280100') || 16;
      
      const rescaleSlope = dataSet.floatString('x00281053') || 1;
      const rescaleIntercept = dataSet.floatString('x00281052') || -1024;
      
      if (bitsAllocated === 16) {
        const rawPixelArray = new Uint16Array(arrayBuffer, pixelDataElement.dataOffset, pixelDataElement.length / 2);
        const huPixelArray = new Float32Array(rawPixelArray.length);
        
        // OPTIMIZED: Unrolled loop for better performance
        const len = rawPixelArray.length;
        const slope = rescaleSlope;
        const intercept = rescaleIntercept;
        
        for (let i = 0; i < len; i += 4) {
          huPixelArray[i] = rawPixelArray[i] * slope + intercept;
          if (i + 1 < len) huPixelArray[i + 1] = rawPixelArray[i + 1] * slope + intercept;
          if (i + 2 < len) huPixelArray[i + 2] = rawPixelArray[i + 2] * slope + intercept;
          if (i + 3 < len) huPixelArray[i + 3] = rawPixelArray[i + 3] * slope + intercept;
        }
        
        return {
          data: huPixelArray,
          width: cols,
          height: rows
        };
      } else {
        throw new Error('Only 16-bit images supported');
      }
    } catch (error) {
      console.error('Error parsing DICOM image:', error);
      return null;
    }
  }, []);

  // OPTIMIZED: Maximum speed preloading with controlled concurrency
  const preloadAllImagesOptimized = useCallback(async (imageList: any[]) => {
    console.log('Starting optimized preload of all images...');
    setIsPreloading(true);
    
    const newCache = new Map();
    const maxConcurrent = 8; // Optimal concurrency for most browsers
    let completed = 0;
    
    // Process images in batches for maximum speed
    const processImage = async (image: any, index: number) => {
      try {
        const imageResponse = await fetch(`/api/images/${image.sopInstanceUID}`);
        if (!imageResponse.ok) {
          throw new Error(`Failed to load image ${index + 1}`);
        }
        
        const arrayBuffer = await imageResponse.arrayBuffer();
        const imageData = await parseDicomImageOptimized(arrayBuffer);
        
        if (imageData) {
          newCache.set(image.sopInstanceUID, imageData);
        }
        
        completed++;
        setLoadingProgress({ loaded: completed, total: imageList.length });
        
        if (completed % 10 === 0) {
          console.log(`Preloaded ${completed}/${imageList.length} images`);
        }
      } catch (error) {
        console.warn(`Failed to preload image ${index + 1}:`, error);
        completed++;
        setLoadingProgress({ loaded: completed, total: imageList.length });
      }
    };
    
    // Process in controlled batches for optimal performance
    for (let i = 0; i < imageList.length; i += maxConcurrent) {
      const batch = imageList.slice(i, i + maxConcurrent);
      const promises = batch.map((image, batchIndex) => 
        processImage(image, i + batchIndex)
      );
      
      await Promise.allSettled(promises);
      
      // Update cache progressively for immediate display
      setImageCache(new Map(newCache));
      
      // Small yield to prevent browser freeze
      await new Promise(resolve => setTimeout(resolve, 5));
    }
    
    setImageCache(newCache);
    setIsPreloading(false);
    console.log(`Preloading complete: ${newCache.size}/${imageList.length} images cached`);
  }, [parseDicomImageOptimized]);

  // OPTIMIZED: Fast image display
  const displayCurrentImage = useCallback(async () => {
    if (!canvasRef.current || images.length === 0) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    try {
      const currentImage = images[currentIndex];
      const cacheKey = currentImage.sopInstanceUID;
      
      // Clear canvas
      ctx.fillStyle = 'black';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      let imageData = imageCache.get(cacheKey);
      
      if (!imageData) {
        // Show loading indicator for this specific image
        ctx.fillStyle = 'white';
        ctx.font = '16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('Loading image...', canvas.width / 2, canvas.height / 2);
        return;
      }
      
      // Keep fixed canvas size for consistent display
      canvas.width = 1024;
      canvas.height = 1024;
      
      // Render with current window/level settings
      render16BitImageOptimized(ctx, imageData.data, imageData.width, imageData.height);
      
      // Render RT structure overlays if available
      if (rtStructures && showStructures) {
        renderRTStructures(ctx, canvas, currentImage);
      }
      
    } catch (error: any) {
      console.error('Error displaying image:', error);
      const ctx = canvasRef.current?.getContext('2d');
      if (ctx) {
        ctx.fillStyle = 'black';
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        ctx.fillStyle = 'red';
        ctx.font = '16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('Error loading DICOM', ctx.canvas.width / 2, ctx.canvas.height / 2 - 10);
        ctx.fillText(error.message, ctx.canvas.width / 2, ctx.canvas.height / 2 + 10);
      }
    }
  }, [images, currentIndex, imageCache, currentWindowLevel, rtStructures, showStructures]);

  // OPTIMIZED: Fast rendering with performance improvements
  const render16BitImageOptimized = useCallback((ctx: CanvasRenderingContext2D, pixelArray: Float32Array, width: number, height: number) => {
    // Use OffscreenCanvas if available for better performance
    const useOffscreen = 'OffscreenCanvas' in window;
    
    let tempCanvas: HTMLCanvasElement | OffscreenCanvas;
    let tempCtx: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;
    
    if (useOffscreen) {
      tempCanvas = new OffscreenCanvas(width, height);
      tempCtx = tempCanvas.getContext('2d') as OffscreenCanvasRenderingContext2D;
    } else {
      tempCanvas = document.createElement('canvas');
      tempCanvas.width = width;
      tempCanvas.height = height;
      tempCtx = tempCanvas.getContext('2d') as CanvasRenderingContext2D;
    }
    
    if (!tempCtx) return;
    
    const imageData = tempCtx.createImageData(width, height);
    const data = imageData.data;

    // OPTIMIZED: Fast windowing calculation
    const { width: windowWidth, center: windowCenter } = currentWindowLevel;
    const min = windowCenter - windowWidth / 2;
    const scale = 255 / windowWidth;
    
    // OPTIMIZED: Unrolled loop for maximum performance
    const len = pixelArray.length;
    for (let i = 0; i < len; i += 4) {
      const pixelIndex = i * 4;
      
      // Process 4 pixels at once for better performance
      for (let j = 0; j < 4 && i + j < len; j++) {
        const pixelValue = pixelArray[i + j];
        const normalizedValue = Math.max(0, Math.min(255, (pixelValue - min) * scale));
        const idx = pixelIndex + j * 4;
        
        data[idx] = normalizedValue;     // R
        data[idx + 1] = normalizedValue; // G
        data[idx + 2] = normalizedValue; // B
        data[idx + 3] = 255;            // A
      }
    }

    tempCtx.putImageData(imageData, 0, 0);
    
    // Scale and draw with optimized settings
    const canvasWidth = ctx.canvas.width;
    const canvasHeight = ctx.canvas.height;
    const scaledWidth = width * zoom;
    const scaledHeight = height * zoom;
    
    const x = (canvasWidth - scaledWidth) / 2 + panX;
    const y = (canvasHeight - scaledHeight) / 2 + panY;
    
    ctx.imageSmoothingEnabled = zoom > 1;
    ctx.imageSmoothingQuality = 'high';
    ctx.drawImage(tempCanvas as any, x, y, scaledWidth, scaledHeight);
  }, [currentWindowLevel, zoom, panX, panY]);

  // Placeholder for RT structure rendering
  const renderRTStructures = useCallback((ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement, currentImage: any) => {
    // RT structure rendering implementation
  }, []);

  // Effects
  useEffect(() => {
    loadImages();
  }, [loadImages]);

  useEffect(() => {
    if (images.length > 0) {
      displayCurrentImage();
    }
  }, [displayCurrentImage]);

  // Navigation functions
  const goToNextImage = useCallback(() => {
    if (currentIndex < images.length - 1) {
      setCurrentIndex(currentIndex + 1);
    }
  }, [currentIndex, images.length]);

  const goToPreviousImage = useCallback(() => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
    }
  }, [currentIndex]);

  // Mouse and keyboard handlers (simplified for space)
  const handleCanvasMouseDown = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {
    e.preventDefault();
    if (e.button === 0) {
      setIsDragging(true);
      setDragStart({ x: e.clientX, y: e.clientY });
      setLastPanX(panX);
      setLastPanY(panY);
    }
  }, [panX, panY]);

  const handleCanvasMouseMove = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {
    if (isDragging) {
      const deltaX = e.clientX - dragStart.x;
      const deltaY = e.clientY - dragStart.y;
      setPanX(lastPanX + deltaX);
      setPanY(lastPanY + deltaY);
    }
  }, [isDragging, dragStart, lastPanX, lastPanY]);

  const handleCanvasMouseUp = useCallback(() => {
    setIsDragging(false);
  }, []);

  const handleCanvasWheel = useCallback((e: React.WheelEvent<HTMLCanvasElement>) => {
    e.preventDefault();
    
    if (e.ctrlKey || e.metaKey) {
      const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;
      setZoom(prev => Math.max(0.1, Math.min(5, prev * zoomFactor)));
    } else {
      if (e.deltaY > 0) {
        goToNextImage();
      } else {
        goToPreviousImage();
      }
    }
  }, [goToNextImage, goToPreviousImage]);

  if (isLoading) {
    return (
      <Card className="h-full bg-black border-indigo-800 flex items-center justify-center">
        <div className="text-center text-white">
          <div className="animate-spin w-8 h-8 border-2 border-indigo-500 border-t-transparent rounded-full mx-auto mb-2"></div>
          <p>Loading CT scan...</p>
          <p className="text-sm mt-2">
            {loadingProgress.total > 0 && `${loadingProgress.loaded} / ${loadingProgress.total} images`}
          </p>
        </div>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className="h-full bg-black border-indigo-800 flex items-center justify-center">
        <div className="text-center text-red-400">
          <p className="mb-2">Error loading CT scan:</p>
          <p className="text-sm">{error}</p>
          <Button onClick={loadImages} className="mt-4 bg-indigo-600 hover:bg-indigo-700">
            Retry
          </Button>
        </div>
      </Card>
    );
  }

  return (
    <Card className="h-full bg-black border-indigo-800">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-indigo-700">
        <div className="flex items-center space-x-2">
          <Badge className="bg-indigo-900 text-indigo-200">
            CT Scan
          </Badge>
          {images.length > 0 && (
            <Badge variant="outline" className="border-indigo-600 text-indigo-300">
              {currentIndex + 1} / {images.length}
            </Badge>
          )}
          {isPreloading && (
            <Badge variant="outline" className="border-yellow-600 text-yellow-300">
              Loading: {loadingProgress.loaded}/{loadingProgress.total}
            </Badge>
          )}
        </div>
        
        <div className="flex items-center space-x-2">
          <Button
            size="sm"
            variant="outline"
            onClick={goToPreviousImage}
            disabled={currentIndex === 0}
            className="border-indigo-600 hover:bg-indigo-800"
          >
            <ChevronLeft className="w-4 h-4" />
          </Button>
          <Button
            size="sm"
            variant="outline"
            onClick={goToNextImage}
            disabled={currentIndex === images.length - 1}
            className="border-indigo-600 hover:bg-indigo-800"
          >
            <ChevronRight className="w-4 h-4" />
          </Button>
        </div>
      </div>

      {/* Canvas */}
      <div className="flex-1 p-4 flex items-center justify-center">
        <div className="relative">
          <canvas
            ref={canvasRef}
            width={1024}
            height={1024}
            onMouseDown={handleCanvasMouseDown}
            onMouseMove={handleCanvasMouseMove}
            onMouseUp={handleCanvasMouseUp}
            onWheel={handleCanvasWheel}
            onContextMenu={(e) => e.preventDefault()}
            className="max-w-full max-h-full object-contain border border-indigo-700 rounded cursor-move"
            style={{ 
              backgroundColor: 'black',
              imageRendering: 'auto',
              userSelect: 'none'
            }}
          />
          
          {/* Status overlay */}
          <div className="absolute top-2 right-2 bg-black bg-opacity-75 text-white px-2 py-1 rounded text-xs">
            <div>W:{Math.round(currentWindowLevel.width)} L:{Math.round(currentWindowLevel.center)}</div>
            {images.length > 0 && images[currentIndex] && (
              <div className="mt-1">
                Z: {images[currentIndex].parsedSliceLocation?.toFixed(1) || 
                     images[currentIndex].parsedZPosition?.toFixed(1) || 
                     (currentIndex + 1)}
              </div>
            )}
          </div>
        </div>
      </div>
    </Card>
  );
}

declare global {
  interface Window {
    dicomParser: any;
  }
}