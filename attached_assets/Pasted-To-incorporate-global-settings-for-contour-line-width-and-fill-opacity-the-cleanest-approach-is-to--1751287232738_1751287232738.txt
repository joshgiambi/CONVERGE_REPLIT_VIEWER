To incorporate global settings for contour line width and fill opacity, the cleanest approach is to use a global React context or a central state manager (like Zustand or Redux). But for simplicity and speed, let’s assume you’re keeping state local via React and props. I’ll explain how to do both.

⸻

🧱 Basic Setup: Add Global UI State

1. Add Settings to Global State (e.g., in ViewerInterface or parent)

const [contourLineWidth, setContourLineWidth] = useState(2);
const [contourFillOpacity, setContourFillOpacity] = useState(0.3);

You could expose these in a sidebar or settings menu:

<label>Contour Line Width
  <input
    type="range"
    min={1}
    max={5}
    step={0.5}
    value={contourLineWidth}
    onChange={(e) => setContourLineWidth(parseFloat(e.target.value))}
  />
</label>

<label>Fill Opacity
  <input
    type="range"
    min={0}
    max={1}
    step={0.05}
    value={contourFillOpacity}
    onChange={(e) => setContourFillOpacity(parseFloat(e.target.value))}
  />
</label>


⸻

🎨 Pass the Settings into the Rendering Component

In your <RTStructureOverlay /> component, pass them down:

<RTStructureOverlay
  ...
  contourLineWidth={contourLineWidth}
  contourFillOpacity={contourFillOpacity}
/>

Update the props interface:

interface RTStructureOverlayProps {
  ...
  contourLineWidth: number;
  contourFillOpacity: number;
}


⸻

🖌️ Use Settings in renderRTStructures

Inside your renderRTStructures function:

function renderRTStructures(
  ctx: CanvasRenderingContext2D,
  canvas: HTMLCanvasElement,
  rtStructures: RTStructureSet,
  currentSlicePosition: number,
  imageWidth: number,
  imageHeight: number,
  zoom: number,
  panX: number,
  panY: number,
  contourLineWidth: number,
  contourFillOpacity: number
) {
  ctx.save();
  ctx.translate(canvas.width / 2, canvas.height / 2);
  ctx.scale(zoom, zoom);
  ctx.translate(-canvas.width / 2 + panX, -canvas.height / 2 + panY);

  ctx.globalAlpha = 1;

  const tolerance = 2.0;

  rtStructures.structures.forEach(structure => {
    const [r, g, b] = structure.color;
    ctx.strokeStyle = `rgb(${r}, ${g}, ${b})`;
    ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${contourFillOpacity})`;
    ctx.lineWidth = contourLineWidth / zoom;

    structure.contours.forEach(contour => {
      if (Math.abs(contour.slicePosition - currentSlicePosition) <= tolerance) {
        drawContour(ctx, contour, canvas.width, canvas.height, imageWidth, imageHeight);
      }
    });
  });

  ctx.restore();
}

Then in useEffect where you call this:

renderRTStructures(
  ctx,
  canvas,
  rtStructures,
  currentSlicePosition,
  imageWidth,
  imageHeight,
  zoom,
  panX,
  panY,
  contourLineWidth,
  contourFillOpacity
);


⸻

🧠 Advanced: Use a Global Context (Optional)

If you want these settings available across tools (e.g., brush, viewer, overlays), consider:

const ViewerSettingsContext = createContext({
  contourLineWidth: 2,
  contourFillOpacity: 0.3,
  setContourLineWidth: () => {},
  setContourFillOpacity: () => {}
});

Then wrap your app in a <ViewerSettingsProvider> and useContext(ViewerSettingsContext) anywhere you need them.

⸻

✅ Summary

Setting	Controls	Applies To
contourLineWidth	Stroke thickness	ctx.lineWidth (scaled for zoom)
contourFillOpacity	Alpha for interior fill	ctx.fillStyle with RGBA

Let me know if you want me to wire this up for brush tool visualization too (so fill/stroke width matches settings).